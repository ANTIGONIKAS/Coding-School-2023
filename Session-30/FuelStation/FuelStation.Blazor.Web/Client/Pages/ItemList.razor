@page "/itemlist"
@using FuelStation.Blazor.Web.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<h3>Item List</h3>

@if (isLoading)
{
        <p>Loading ...</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Item Type</th>
                <th>Price</th>
                <th>Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemList)
            {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.ItemType</td>
                    <td>@item.Price</td>
                    <td>@item.Cost</td>
                   
                    
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(item)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
     

@code {
   bool isLoading { get; set; } = true;
    private List<ItemListDto> itemList = new();

   

    
    string errorMessage = null;


    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        itemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
        
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("itemlist/edit");
    }

    private void EditItem(ItemListDto item)
    {
        navigationManager.NavigateTo($"itemList/edit/{item.Id}");
    }

    private async Task DeleteItem(ItemListDto item)
    {
        errorMessage = null;
        var comfirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (comfirm)
        {
            var response = await httpClient.DeleteAsync($"item/{item.Id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                //await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }
  
}
}